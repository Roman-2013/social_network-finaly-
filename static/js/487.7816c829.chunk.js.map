{"version":3,"file":"static/js/487.7816c829.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css?a7c9","components/Profile/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileData/ProfileData.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__BvNe2\",\"blockPicture\":\"ProfileInfo_blockPicture__n1WdY\",\"contacts\":\"ProfileInfo_contacts__payiG\",\"error\":\"ProfileInfo_error__f-Wbv\"};","import React from 'react';\r\nimport {CreateField, Input} from '../../../common/FormsControls/FormsControls';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {ProfileAPI} from '../../../state/profileReducer';\r\nimport s from '../MyPosts/ProfileInfo/ProfileInfo.module.css';\r\nimport {required} from '../../../utils/validators/validators';\r\n\r\nexport type FormProfileDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\nconst ProfileForm: React.FC<InjectedFormProps<FormProfileDataType, { profile: ProfileAPI }> & {\r\n    profile: ProfileAPI\r\n}> = ({handleSubmit, profile, error}) => {\r\n\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <button onClick={() => {\r\n        }}>save\r\n        </button>\r\n        {error && <div className={s.error}>{error}</div>}\r\n        <div>Full name:<CreateField name={'fullName'} placeholder={'full Name'} validate={[required]}\r\n                                    component={Input}/></div>\r\n        <div>Looking for a job: <CreateField name={'lookingForAJob'} placeholder={null} validate={[]} component={Input}\r\n                                             restProps={{type: 'checkbox'}}/></div>\r\n        <div>Looking for a job description: <CreateField name={'lookingForAJobDescription'}\r\n                                                         placeholder={'Looking for a job description'}\r\n                                                         validate={[required]} component={Input}/></div>\r\n        <div>About me : <CreateField name={'aboutMe'} placeholder={'About me'} validate={[required]} component={Input}/>\r\n        </div>\r\n\r\n        <div><b>Contact</b> : {profile.contacts ? Object.keys(profile.contacts).map(el => {\r\n            return <div key={el} className={s.contacts}>{el}:<CreateField name={'contacts.' + el} placeholder={'-'}\r\n                                                                          validate={[]} component={Input}/></div>\r\n        }) : ''}</div>\r\n\r\n\r\n    </form>\r\n}\r\n\r\n\r\nexport const ProfileDataForm = reduxForm<FormProfileDataType, { profile: ProfileAPI }>({form: 'profile'})(ProfileForm)","import React, {ChangeEvent, FocusEvent, useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppDispatch} from '../../../state/reduxStore';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateProfileStatusTC: (status: string) => void\r\n    isOwner:boolean\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusType> = ({updateProfileStatusTC, status,isOwner}) => {\r\n\r\n    const [editMode, setEditMode] = useState(true)\r\n    const [statusLocal, setStatus] = useState(status)\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(status)\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        if(!isOwner){\r\n            setEditMode(false)\r\n        }\r\n    }\r\n    const diActivateEditMode = () => {\r\n        updateProfileStatusTC(statusLocal)\r\n        setEditMode(true)\r\n    }\r\n    const onchangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <b>Status:</b> {editMode\r\n\r\n            ?\r\n            <span\r\n                onDoubleClick={activateEditMode}>\r\n                    {statusLocal || 'No status'}\r\n                </span>\r\n\r\n            : <input\r\n                onChange={(e) => onchangeStatus(e)}\r\n                onBlur={diActivateEditMode}\r\n                type=\"text\"\r\n                value={statusLocal}\r\n                autoFocus/>\r\n        }\r\n        </div>\r\n    );\r\n\r\n}\r\n","import React from 'react';\r\nimport s from '../MyPosts/ProfileInfo/ProfileInfo.module.css';\r\nimport {ProfileStatusWithHooks} from '../ProfileStatus/ProfileStatusWithHooks';\r\nimport {ProfileAPI} from '../../../state/profileReducer';\r\n\r\ntype ProfileDataPropsType = {\r\n    isOwner: boolean\r\n    onMainPhoto: (value: any | null) => void\r\n    updateProfileStatusTC: (status: string) => void,\r\n    photos: string\r\n    profile: ProfileAPI,\r\n    status: string,\r\n\r\n}\r\n\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType & { activateEditMode: (value: boolean) => void }> = ({\r\n                                                                                                                  isOwner,\r\n                                                                                                                  onMainPhoto,\r\n                                                                                                                  updateProfileStatusTC,\r\n                                                                                                                  photos,\r\n                                                                                                                  profile,\r\n                                                                                                                  status,\r\n                                                                                                                  activateEditMode\r\n                                                                                                              }) => {\r\n    return (\r\n        <div className={s.description}>\r\n            {isOwner || <div>\r\n                <button onClick={() => activateEditMode(true)}>edit</button>\r\n            </div>}\r\n            <img alt={'image'} src={photos}/>\r\n            {isOwner || <input onChange={(e) => onMainPhoto(e.target.files ? e.target.files[0] : '')} type=\"file\"/>}\r\n            <ProfileStatusWithHooks isOwner={isOwner} updateProfileStatusTC={updateProfileStatusTC} status={status}/>\r\n            <div><b>Name:</b> {profile.fullName}</div>\r\n            <div><b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            {profile.lookingForAJob &&\r\n                <div><b>\r\n                    Looking for a job\r\n                    description:</b> {profile.lookingForAJobDescription ? profile.lookingForAJobDescription : 'no content'}\r\n                </div>\r\n            }\r\n            <div><b>About me:</b> {profile.aboutMe ? profile.aboutMe : 'no content'}</div>\r\n            <div><b>Contact</b> : {profile.contacts ? Object.keys(profile.contacts).map(el => {\r\n                return <div key={el} className={s.contacts}><b>{el}</b> : {(profile.contacts as {\r\n                    [key: string]: string\r\n                })[el] || '-'}</div>\r\n            }) : ''}</div>\r\n\r\n            <div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileAPI} from '../../../../state/profileReducer';\r\nimport {ProfileStatusWithHooks} from '../../ProfileStatus/ProfileStatusWithHooks';\r\nimport {FormProfileDataType, ProfileDataForm} from '../../ProfileDataForm/ProfileDataForm';\r\nimport {ProfileData} from '../../ProfileData/ProfileData';\r\n\r\n\r\nexport const ProfileInfo: React.FC<{\r\n    updateProfileStatusTC: (status: string) => void,\r\n    status: string,\r\n    saveProfile: (profile:FormProfileDataType)=>Promise<any>,\r\n    profile: ProfileAPI,\r\n    isOwner: boolean,\r\n    savePhotoTC: (photo: any) => void,\r\n    photos: string\r\n}> = ({saveProfile, profile, status, updateProfileStatusTC, isOwner, savePhotoTC, photos}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n\r\n    const onMainPhoto = (value: any | null) => {\r\n        savePhotoTC(value)\r\n    }\r\n    const activateEditMoode = (value: boolean) => {\r\n        setEditMode(value)\r\n    }\r\n\r\n    const onSubmit = (value: FormProfileDataType) => {\r\n        saveProfile(value)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.blockPicture}>\r\n                <img\r\n                    src=\"https://sun9-65.userapi.com/impg/c857736/v857736321/1034e2/DywLDwd6CeA.jpg?size=807x325&quality=96&sign=2d19ba00a905cdbe81732042935997de&type=album\"\r\n                    alt=\"image\"/>\r\n            </div>\r\n            {editMode\r\n                ? <ProfileDataForm profile={profile} initialValues={profile} onSubmit={onSubmit}/>\r\n                : <ProfileData activateEditMode={activateEditMoode} status={status} isOwner={isOwner}\r\n                               onMainPhoto={onMainPhoto} profile={profile}\r\n                               photos={photos} updateProfileStatusTC={updateProfileStatusTC}/>\r\n            }\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__0ggbK\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__OzShW\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nexport type PostPropsType={\r\n    message:string\r\n    likesCount:number\r\n    id:number\r\n}\r\n\r\nexport const Post:React.FC<PostPropsType> = ({likesCount,message}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://img.freepik.com/premium-photo/anime-male-avatar_950633-917.jpg\" alt=\"\"/>\r\n            {message}\r\n            <div>{`${likesCount} Like`}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post, PostPropsType} from './Posts/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\ntype ReduxProfileTextAreaFormProps = {\r\n    profileText: string\r\n}\r\n\r\ntype MyPostsType = {\r\n    addPostAC: (profileText: string) => void\r\n    postData: PostPropsType[]\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n    let {addPostAC, postData} = props;\r\n\r\n    const onProfileTextSubmit = (formData: ReduxProfileTextAreaFormProps) => {\r\n        addPostAC(formData.profileText)\r\n        formData.profileText = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <div>\r\n                <ReduxProfileTextAreaForm onSubmit={onProfileTextSubmit}/>\r\n            </div>\r\n\r\n\r\n            {postData.map(el => {\r\n                return <Post id={el.id} key={el.id} likesCount={el.likesCount} message={el.message}/>\r\n\r\n            })}\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLengthValidator = maxLengthCreator(10)\r\n\r\n\r\nconst ProfileTextAreaForm: React.FC<InjectedFormProps<ReduxProfileTextAreaFormProps>> = ({handleSubmit}) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field\r\n                component={Textarea}\r\n                name={'profileText'}\r\n                placeholder={'Enter your message'}\r\n                validate={[required, maxLengthValidator]}\r\n\r\n            />\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxProfileTextAreaForm = reduxForm<ReduxProfileTextAreaFormProps>({form: 'profileMessage'})(ProfileTextAreaForm)","import {addPostAC} from '../../../state/profileReducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppRootStateType} from '../../../state/reduxStore';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst   mapStateToProps=(state:AppRootStateType)=>{\r\n    return{\r\n        postData:state.ProfilePage.postData,\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const MyPostsContainer=connect(mapStateToProps, {\r\n    addPostAC:addPostAC,\r\n})(MyPosts)\r\n","import React from 'react';\r\nimport {ProfileInfo} from './MyPosts/ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileAPI} from '../../state/profileReducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {useAppDispatch} from '../../state/reduxStore';\r\nimport {useDispatch} from 'react-redux';\r\nimport {FormProfileDataType} from './ProfileDataForm/ProfileDataForm';\r\n\r\n\r\nexport const Profile: React.FC<{\r\n    isOwner:boolean,\r\n    updateProfileStatusTC: (status: string) => void,\r\n    status: string,\r\n    profile: null | ProfileAPI,\r\n    savePhotoTC:(photo:any)=>void,\r\n    photos:string,\r\n    saveProfile:(profile:FormProfileDataType)=>Promise<any>\r\n}> = ({profile,saveProfile, status, updateProfileStatusTC,isOwner,savePhotoTC,photos}) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !profile\r\n                    ? <Preloader/>\r\n                    : <ProfileInfo saveProfile={saveProfile} photos={photos} savePhotoTC={savePhotoTC} isOwner={isOwner} updateProfileStatusTC={updateProfileStatusTC} status={status} profile={profile}/>\r\n            }\r\n\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, {ComponentType, ElementType} from 'react';\r\nimport {\r\n    getProfileStatusTC,\r\n    ProfileAPI,\r\n    savePhotoTC, saveProfileTC,\r\n    setProfileTC,\r\n    updateProfileStatusTC\r\n} from '../../state/profileReducer';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/reduxStore';\r\nimport {Params, useParams} from 'react-router-dom'\r\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport  userPhoto from '../../img/anime-male-avatar_950633-914.avif'\r\nimport {FormProfileDataType} from './ProfileDataForm/ProfileDataForm';\r\n\r\n\r\nfunction withRouter(Component: ElementType) {\r\n    function ComponentWithRouterProp(props: ProfileAPIContainerType) {\r\n        let params = useParams();\r\n        return <Component{...props} params={params}/>\r\n\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\ntype ProfileAPIContainerType = {\r\n    setProfileTC: (profileId: number) => void\r\n    profile: null | ProfileAPI\r\n    params?: Params | undefined\r\n    getProfileStatusTC: (userId: number) => void\r\n    updateProfileStatusTC: (status: string) => void\r\n    status: string\r\n    authorizedUserId: number\r\n    isFetching: boolean\r\n    savePhotoTC:(photo:any)=>void\r\n    photo:string| undefined\r\n    saveProfileTC:(profile:FormProfileDataType)=>Promise<any>\r\n}\r\n\r\n\r\nexport class ProfileAPIContainer extends React.Component<ProfileAPIContainerType> {\r\n\r\n\r\n    refreshProfile() {\r\n        let profileId: number = Number(this.props.params?.id)\r\n        if (!profileId) {\r\n            profileId = this.props.authorizedUserId\r\n        }\r\n        this.props.setProfileTC(profileId)\r\n        this.props.getProfileStatusTC(profileId)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileAPIContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.params?.id != prevProps.params?.id) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div>\r\n            <Profile\r\n                saveProfile={this.props.saveProfileTC}\r\n                photos={this.props.photo?this.props.photo:userPhoto}\r\n                isOwner={!!this.props.params?.id}\r\n                updateProfileStatusTC={this.props.updateProfileStatusTC}\r\n                status={this.props.status}\r\n                profile={this.props.profile}\r\n                savePhotoTC={this.props.savePhotoTC}\r\n            />\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profile: state.ProfilePage.profile,\r\n        status: state.ProfilePage.status,\r\n        authorizedUserId: state.Auth.id,\r\n        isFetching: state.Auth.isFetching,\r\n        photo:state.ProfilePage.profile.photos?.large\r\n    }\r\n}\r\n\r\n\r\nconst ProfileContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setProfileTC,\r\n        getProfileStatusTC,\r\n        updateProfileStatusTC,\r\n        savePhotoTC,\r\n        saveProfileTC\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect,\r\n)(ProfileAPIContainer)\r\n\r\nexport default ProfileContainer","import {Navigate} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {AppRootStateType} from '../state/reduxStore';\r\nimport {connect} from 'react-redux';\r\n\r\ntype WithAuthRedirectType = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst mapStateToPropsRedirect = (state: AppRootStateType): WithAuthRedirectType => {\r\n\r\n\r\n    return {\r\n        isFetching: state.Auth.isFetching\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: WithAuthRedirectType) => {\r\n        const {isFetching, ...restProps} = props\r\n        if (!isFetching) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsRedirect,)(RedirectComponent)\r\n}\r\n\r\n"],"names":["ProfileDataForm","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","className","s","name","placeholder","validate","required","component","Input","restProps","type","contacts","Object","keys","map","el","ProfileStatusWithHooks","updateProfileStatusTC","status","isOwner","useState","editMode","setEditMode","statusLocal","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onchangeStatus","onBlur","autoFocus","ProfileData","onMainPhoto","photos","activateEditMode","alt","src","target","files","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","saveProfile","savePhotoTC","initialValues","then","Post","likesCount","message","MyPosts","React","props","addPostAC","postData","ReduxProfileTextAreaForm","formData","profileText","id","maxLengthValidator","maxLengthCreator","Field","Textarea","MyPostsContainer","connect","state","ProfilePage","Profile","Preloader","ProfileAPIContainer","profileId","Number","this","params","authorizedUserId","setProfileTC","getProfileStatusTC","refreshProfile","prevProps","prevState","snapshot","saveProfileTC","photo","userPhoto","compose","Auth","isFetching","large","Component","useParams","WithAuthRedirect","mapStateToPropsRedirect","to"],"sourceRoot":""}