{"version":3,"file":"static/js/682.f4696853.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css?a7c9","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__BvNe2\",\"blockPicture\":\"ProfileInfo_blockPicture__n1WdY\"};","import React, {ChangeEvent, FocusEvent, useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppDispatch} from '../../../state/reduxStore';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateProfileStatusTC: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusType> = ({updateProfileStatusTC, status}) => {\r\n\r\n    const [editMode, setEditMode] = useState(true)\r\n    const [statusLocal, setStatus] = useState(status)\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(status)\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n    const diActivateEditMode = () => {\r\n        updateProfileStatusTC(statusLocal)\r\n        setEditMode(true)\r\n    }\r\n    const onchangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <div>\r\n                    <span\r\n                        onDoubleClick={activateEditMode}>\r\n                    {statusLocal || 'No status'}\r\n                </span>\r\n            </div>\r\n            : <div><input\r\n                onChange={(e) => onchangeStatus(e)}\r\n                onBlur={diActivateEditMode}\r\n                type=\"text\"\r\n                value={statusLocal}\r\n                autoFocus/>\r\n            </div>\r\n    );\r\n\r\n}\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileAPI} from '../../../../state/profileReducer';\r\nimport userPhoto from './../../../../img/anime-male-avatar_950633-914.avif'\r\nimport {ProfileStatusWithHooks} from '../../ProfileStatus/ProfileStatusWithHooks';\r\n\r\n\r\nexport const ProfileInfo:React.FC<{updateProfileStatusTC:(status:string)=>void,status:string,profile:  ProfileAPI}> = ({profile,status,updateProfileStatusTC}) => {\r\n    return (\r\n        <>\r\n            <div className={s.blockPicture}>\r\n                <img\r\n                    src=\"https://sun9-65.userapi.com/impg/c857736/v857736321/1034e2/DywLDwd6CeA.jpg?size=807x325&quality=96&sign=2d19ba00a905cdbe81732042935997de&type=album\"\r\n                    alt=\"\"/>\r\n\r\n            </div >\r\n            <div className={s.description}>\r\n                <div>{profile.aboutMe}</div>\r\n               <div>{profile.fullName}</div>\r\n              <div>\r\n                  <img alt={'image'} src={profile.photos.small===null?userPhoto:profile.photos.small}/>\r\n                  <ProfileStatusWithHooks updateProfileStatusTC={updateProfileStatusTC} status={status}/>\r\n              </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__0ggbK\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__OzShW\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nexport type PostPropsType={\r\n    message:string\r\n    likesCount:number\r\n    id:number\r\n}\r\n\r\nexport const Post:React.FC<PostPropsType> = ({likesCount,message}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://img.freepik.com/premium-photo/anime-male-avatar_950633-917.jpg\" alt=\"\"/>\r\n            {message}\r\n            <div>{`${likesCount} Like`}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post, PostPropsType} from './Posts/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\ntype ReduxProfileTextAreaFormProps = {\r\n    profileText: string\r\n}\r\n\r\ntype MyPostsType = {\r\n    addPostAC: (profileText: string) => void\r\n    postData: PostPropsType[]\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log('render myPost')\r\n    let {addPostAC, postData} = props;\r\n\r\n    const onProfileTextSubmit = (formData: ReduxProfileTextAreaFormProps) => {\r\n        addPostAC(formData.profileText)\r\n        formData.profileText = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <div>\r\n                <ReduxProfileTextAreaForm onSubmit={onProfileTextSubmit}/>\r\n            </div>\r\n\r\n\r\n            {postData.map(el => {\r\n                return <Post id={el.id} key={el.id} likesCount={el.likesCount} message={el.message}/>\r\n\r\n            })}\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLengthValidator = maxLengthCreator(10)\r\n\r\n\r\nconst ProfileTextAreaForm: React.FC<InjectedFormProps<ReduxProfileTextAreaFormProps>> = ({handleSubmit}) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field\r\n                component={Textarea}\r\n                name={'profileText'}\r\n                placeholder={'Enter your message'}\r\n                validate={[required, maxLengthValidator]}\r\n\r\n            />\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxProfileTextAreaForm = reduxForm<ReduxProfileTextAreaFormProps>({form: 'profileMessage'})(ProfileTextAreaForm)","import {addPostAC} from '../../../state/profileReducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppRootStateType} from '../../../state/reduxStore';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst   mapStateToProps=(state:AppRootStateType)=>{\r\n    return{\r\n        postData:state.ProfilePage.postData,\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const MyPostsContainer=connect(mapStateToProps, {\r\n    addPostAC:addPostAC,\r\n})(MyPosts)\r\n","import React from 'react';\r\nimport {ProfileInfo} from './MyPosts/ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileAPI} from '../../state/profileReducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {useAppDispatch} from '../../state/reduxStore';\r\nimport {useDispatch} from 'react-redux';\r\n\r\n\r\n\r\nexport const Profile:React.FC<{updateProfileStatusTC:(status:string)=>void, status:string,profile:  null| ProfileAPI }> = ({profile,status,updateProfileStatusTC}) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !profile\r\n                    ? <Preloader/>\r\n                    :  <ProfileInfo updateProfileStatusTC={updateProfileStatusTC} status={status} profile={profile}/>\r\n            }\r\n\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, {ComponentType, ElementType} from 'react';\r\nimport {getProfileStatusTC, ProfileAPI, setProfileTC, updateProfileStatusTC} from '../../state/profileReducer';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/reduxStore';\r\nimport {Params, useParams} from 'react-router-dom'\r\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nfunction withRouter(Component: ElementType) {\r\n    function ComponentWithRouterProp(props: ProfileAPIContainerType) {\r\n        let params = useParams();\r\n        return <Component{...props} params={params}/>\r\n\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\ntype ProfileAPIContainerType = {\r\n    setProfileTC: (profileId: number) => void\r\n    profile: null | ProfileAPI\r\n    params?: Params | undefined\r\n    getProfileStatusTC: (userId: number) => void\r\n    updateProfileStatusTC: (status: string) => void\r\n    status: string\r\n    authorizedUserId: number\r\n    isFetching: boolean\r\n}\r\n\r\n\r\nexport class ProfileAPIContainer extends React.Component<ProfileAPIContainerType> {\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        let profileId;\r\n        this.props.params?.id === undefined\r\n            ? profileId = this.props.authorizedUserId\r\n            : profileId = +this.props.params.id\r\n\r\n\r\n        this.props.setProfileTC(profileId)\r\n        this.props.getProfileStatusTC(profileId)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return <div>\r\n            <Profile updateProfileStatusTC={this.props.updateProfileStatusTC} status={this.props.status}\r\n                     profile={this.props.profile}/>\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profile: state.ProfilePage.profile,\r\n        status: state.ProfilePage.status,\r\n        authorizedUserId: state.Auth.id,\r\n        isFetching: state.Auth.isFetching\r\n    }\r\n}\r\n\r\n\r\n  const ProfileContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setProfileTC,\r\n        getProfileStatusTC,\r\n        updateProfileStatusTC\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect,\r\n)(ProfileAPIContainer)\r\n\r\nexport default ProfileContainer","import {Navigate} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {AppRootStateType} from '../state/reduxStore';\r\nimport {connect} from 'react-redux';\r\n\r\ntype WithAuthRedirectType = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst mapStateToPropsRedirect = (state: AppRootStateType): WithAuthRedirectType => {\r\n\r\n\r\n    return {\r\n        isFetching: state.Auth.isFetching\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: WithAuthRedirectType) => {\r\n        const {isFetching, ...restProps} = props\r\n        if (!isFetching) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsRedirect,)(RedirectComponent)\r\n}\r\n\r\n"],"names":["ProfileStatusWithHooks","updateProfileStatusTC","status","useState","editMode","setEditMode","statusLocal","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onchangeStatus","onBlur","type","autoFocus","ProfileInfo","profile","className","s","src","alt","aboutMe","fullName","photos","small","userPhoto","Post","likesCount","message","MyPosts","React","props","console","log","addPostAC","postData","ReduxProfileTextAreaForm","onSubmit","formData","profileText","map","el","id","maxLengthValidator","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","ProfilePage","Profile","Preloader","ProfileAPIContainer","profileId","undefined","this","params","authorizedUserId","setProfileTC","getProfileStatusTC","compose","Auth","isFetching","Component","useParams","WithAuthRedirect","mapStateToPropsRedirect","restProps","to"],"sourceRoot":""}