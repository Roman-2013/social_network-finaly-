{"version":3,"file":"static/js/3.28a1640a.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAA+K,wBAA/K,EAAmN,2BAAnN,EAAiQ,kCAAjQ,EAA6S,yBAA7S,EAA6U,sBAA7U,EAA2W,uB,mBCO9VA,EAA6C,SAAC,GAAe,IAAdC,EAAa,EAAbA,GAAGC,EAAU,EAAVA,KAC3D,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAUC,IAAI,kCAAkCC,IAAI,MACrE,2BACA,UAAC,KAAD,CAASC,GAAE,kBAAaN,GAAxB,eAA+B,gBAAKE,UAAWC,EAAhB,SAA2BF,aCJxDM,EAAsC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,QAASR,EAAQ,EAARA,GAC1D,OAEI,gBAAKE,UAAS,WAAMF,EAAK,EAAKG,EAAUA,EAA1B,YAAoCA,EAApC,KAAd,UACI,gBAAKD,UAAWC,EAAhB,SAA4BK,O,uCC2ClCC,GAAoBC,EAAAA,EAAAA,GAAiB,IAkBrCC,GAAoBC,EAAAA,EAAAA,GAA+B,CAACC,KAAK,wBAArCD,EAhB8C,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aACtE,OACI,kBAAMC,SAAUD,EAAhB,WACI,SAACE,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXjB,KAAM,cACNkB,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAASZ,MAE3B,0BACI,qD,mBC1ChB,GAR0Ba,E,QAAAA,KAEtBC,EAAAA,EAAAA,KAVkB,SAACC,GACnB,MAAO,CACHC,YAAYD,EAAME,OAAOD,YACzBE,aAAaH,EAAME,OAAOC,gBAOL,CACrBC,WAAWC,EAAAA,IAEfC,EAAAA,EALsBR,EDCoB,SAAC,GAIO,IAHHM,EAGE,EAHFA,WACAD,EAEE,EAFFA,aACAF,EACE,EADFA,YAS/C,OACI,iBAAKvB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKsB,EAAYM,KAAI,SAAAC,GACb,OAAO,SAACjC,EAAD,CAEHE,KAAM+B,EAAG/B,KACTD,GAAIgC,EAAGhC,IAFFgC,EAAGhC,UAMpB,iBAAKE,UAAWC,EAAhB,UACKwB,EAAaI,KAAI,SAAAC,GACd,OAAO,SAACzB,EAAD,CAEHC,QAASwB,EAAGxB,QACZR,GAAIgC,EAAGhC,IAFFgC,EAAGhC,QAKhB,SAACW,EAAD,CAAqBI,SAxBjB,SAACkB,GAChBL,EAAWK,EAAWC,aACvBD,EAAWC,YAAY,gB,oIElBrBC,EAA0B,SAACX,GAG7B,MAAO,CACHY,WAAYZ,EAAMa,KAAKD,aAIxB,SAASN,EAAoBQ,GAWhC,OAAOf,EAAAA,EAAAA,IAAQY,EAARZ,EATmB,SAACgB,GACvB,IAAOH,EAA4BG,EAA5BH,WAAeI,GAAtB,OAAmCD,EAAnC,GACA,OAAKH,GAGE,SAACE,GAAD,UAAeE,KAFX,SAAC,KAAD,CAAUlC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__p48kt\",\"dialogsItems\":\"Dialogs_dialogsItems__lPxR-\",\"dialog\":\"Dialogs_dialog__w0Xew\",\"messages\":\"Dialogs_messages__H0kHA\",\"avatar\":\"Dialogs_avatar__Z-PRC\",\"container\":\"Dialogs_container__Nbs89\",\"messageContainer\":\"Dialogs_messageContainer__AZKpY\",\"message\":\"Dialogs_message__8qNau\",\"left\":\"Dialogs_left__Fingg\",\"right\":\"Dialogs_right__YycDl\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\nexport type DialogsItemPropsType={\r\n    name:string\r\n    id:number\r\n}\r\nexport const DialogItem: React.FC<DialogsItemPropsType> = ({id,name}) => {\r\n    return (\r\n        <div className={s.container}>\r\n            <img className={s.avatar} src=\"https://i.imgur.com/BIZHbJz.jpg\" alt=\"\"/>\r\n           <span>\r\n           <NavLink to={`message/${id}`}> <div className={s.dialog}>{name}</div></NavLink>\r\n           </span>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\n\r\nexport const Message: React.FC<MessagePropsType> = ({message, id}) => {\r\n    return (\r\n\r\n        <div className={` ${id > 1  ? s.right : s.left} ${s.messageContainer} `}>\r\n            <div className={s.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem, DialogsItemPropsType} from './DialogItem/DialogItem';\r\nimport {Message, MessagePropsType} from './Message/Message';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport { Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\ntype AddMessageFormProps={\r\n    messageText:string\r\n}\r\n\r\nexport type DialogsType = {\r\n    addMessage: (newMessageText:string) => void\r\n    messagesData: MessagePropsType[]\r\n    dialogsData: DialogsItemPropsType[]\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsType> = ({\r\n                                                   addMessage,\r\n                                                   messagesData,\r\n                                                   dialogsData,\r\n                                               }) => {\r\n\r\n\r\nconst addNewMessage=(newMessage:AddMessageFormProps)=>{\r\n     addMessage(newMessage.messageText)\r\n    newMessage.messageText=''\r\n}\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsData.map(el => {\r\n                    return <DialogItem\r\n                        key={el.id}\r\n                        name={el.name}\r\n                        id={el.id}\r\n                    />\r\n                })}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesData.map(el => {\r\n                    return <Message\r\n                        key={el.id}\r\n                        message={el.message}\r\n                        id={el.id}\r\n                    />\r\n                })}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nconst maxLengthValidator= maxLengthCreator(50)\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<AddMessageFormProps>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name={'messageText'}\r\n                   placeholder={'enter your message'}\r\n                   validate={[required,maxLengthValidator]}\r\n            />\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageFormRedux=reduxForm<AddMessageFormProps>({form:'dialogAddMessageForm'})(AddMessageForm)","import {addMessageAC} from '../../state/dialogsReducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {AppRootStateType} from '../../state/reduxStore';\r\nimport {connect} from 'react-redux';\r\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ComponentType, ElementType} from 'react';\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType)=>{\r\n    return {\r\n        dialogsData:state.Dialog.dialogsData,\r\n        messagesData:state.Dialog.messagesData,\r\n    }\r\n}\r\n\r\n\r\n  const DialogsContainer= compose<ComponentType>(\r\n\r\n    connect(mapStateToProps, {\r\n        addMessage:addMessageAC\r\n    }),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n","import {Navigate} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {AppRootStateType} from '../state/reduxStore';\r\nimport {connect} from 'react-redux';\r\n\r\ntype WithAuthRedirectType = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst mapStateToPropsRedirect = (state: AppRootStateType): WithAuthRedirectType => {\r\n\r\n\r\n    return {\r\n        isFetching: state.Auth.isFetching\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: WithAuthRedirectType) => {\r\n        const {isFetching, ...restProps} = props\r\n        if (!isFetching) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsRedirect,)(RedirectComponent)\r\n}\r\n\r\n"],"names":["DialogItem","id","name","className","s","src","alt","to","Message","message","maxLengthValidator","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","placeholder","validate","required","compose","connect","state","dialogsData","Dialog","messagesData","addMessage","addMessageAC","WithAuthRedirect","map","el","newMessage","messageText","mapStateToPropsRedirect","isFetching","Auth","Component","props","restProps"],"sourceRoot":""}